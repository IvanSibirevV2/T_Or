using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace System
{
    public class VK
    {
        /*
        public VK Down() { keybd_event(nVirtKey, 0, 0, 0); return this; }
        public VK Up() { keybd_event(nVirtKey, 0, 2, 0); return this; }
        public System.Boolean Is()
        public byte nVirtKey = 65;//A
        public string Str = "A";
        */
    }
    public class VK_
    {
        [DllImport("user32.dll")]
        private static extern short GetAsyncKeyState(int vKey);
        [DllImport("user32.dll")]
        private static extern short GetKeyState(int nVirtKey);
        [DllImport("user32.dll")]
        private static extern void keybd_event(byte bVk, byte bScan, int dwFlags, int dwExtraInfo);

        //public VK Down() { keybd_event(nVirtKey, 0, 0, 0); return this; }
        //public VK Up() { keybd_event(nVirtKey, 0, 2, 0); return this; }
        //public VK Sleep(int _Sleep = 50) { System.Threading.Thread.Sleep(_Sleep); return this; }
        public static System.Boolean f = false;
        public System.Boolean Is()
        {
            switch (GetKeyState(nVirtKey))
            {
                case -127: //return true; break;
                case -128:
                    // if (f != true) if(this.Sender!=null) this.Sender.HistoryVKS.Add(new VK().Set(_this: this,_TimeSpan: this.Sender.DateTimeStart - System.DateTime.Now, _Act: a => a.Down()));//Записть нажатия
                    f = true;
                    return f; break;
                default:
                    // if (f != false) if (this.Sender != null) this.Sender.HistoryVKS.Add(new VK().Set(_this: this, _TimeSpan: this.Sender.DateTimeStart - System.DateTime.Now, _Act: a => a.Up()));//запись отжатия
                    f = false;
                    return false; break;
            }
            return false;
        }

        public byte nVirtKey = 65;//A
        public string Str = "A";
        public System.TimeSpan TimeSpan;
        public System.Action<VK> Act = null;
        //public VK() { }
    }
}
