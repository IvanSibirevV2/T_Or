using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace TorNado
{
    public class VK_A : IVCommander
    {
        private const byte p__nVirtKey = 65;
        [DllImport("user32.dll")]
        private static extern short GetAsyncKeyState(int vKey);
        [DllImport("user32.dll")]
        private static extern short GetKeyState(int nVirtKey);
        [DllImport("user32.dll")]
        private static extern void keybd_event(byte bVk, byte bScan, int dwFlags, int dwExtraInfo);
        public VK_A() { }
        public System.Byte Get_nVirtKey() { return p__nVirtKey; }
        System.Byte IVCommander.Get_nVirtKey() { return p__nVirtKey; }
        
        public System.String Get_Str() { return "VK_A"; }
        System.String IVCommander.Get_Str() { return "VK_A"; }


        public IVCommander Down() { keybd_event(p__nVirtKey, 0, 0, 0); return this; }
        public IVCommander Up() { keybd_event(p__nVirtKey, 0, 2, 0); return this; }

        public static System.Boolean f = false;
        public System.Boolean Is()
        {
            switch (GetKeyState(p__nVirtKey))
            {
                case -127: //return true; break;
                case -128:
                    // if (f != true) if(this.Sender!=null) this.Sender.HistoryVKS.Add(new VK().Set(_this: this,_TimeSpan: this.Sender.DateTimeStart - System.DateTime.Now, _Act: a => a.Down()));//Записть нажатия
                    f = true;
                    return f; break;
                default:
                    // if (f != false) if (this.Sender != null) this.Sender.HistoryVKS.Add(new VK().Set(_this: this, _TimeSpan: this.Sender.DateTimeStart - System.DateTime.Now, _Act: a => a.Up()));//запись отжатия
                    f = false;
                    return false; break;
            }
            return false;
        }

        ///////////////////////////////////////////////////////////////////////////
        public object New(){ return new Sleep50(); }
        object INewEable.New() { return new Sleep50(); }
        public object Clone() { return new Sleep50(); }
        object ICloneable.Clone() { return new Sleep50(); }
    }
}
